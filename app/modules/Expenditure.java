/**
 * Expenditure.java
 * 
 * Represents an expenditure entity in the Nkwa Real Estate Expenditure Management System.
 * This class encapsulates all expenditure-related data including financial details,
 * categorization, timing, project phase, and optional receipt information.
 * 
 * The Expenditure class supports:
 * - Auto-generated and manual ID assignment
 * - Multi-phase project tracking (Construction, Maintenance, Planning, Marketing, Sales)
 * - Category-based classification for reporting
 * - Bank account association for payment tracking
 * - Receipt linking for documentation
 * - Comprehensive validation for data integrity
 * 
 * @author Group 68, University of Ghana
 * @version 1.0
 * @since 2025
 */
package app.modules;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Expenditure represents a single expense record in the system.
 * 
 * This class manages all aspects of an expenditure including:
 * - Unique identification and description
 * - Financial amount using BigDecimal for precision
 * - Category classification for reporting and analysis
 * - Date and time tracking for temporal analysis
 * - Project phase association for lifecycle management
 * - Bank account linkage for payment tracking
 * - Optional receipt documentation
 * 
 * The class supports both manual ID assignment and auto-generation through
 * the ExpenditureManager, ensuring flexibility in different usage scenarios.
 * 
 * Supported project phases include:
 * - Construction: Building and development expenses
 * - Maintenance: Ongoing upkeep and repairs
 * - Planning: Design and preparation costs
 * - Marketing: Promotional and advertising expenses
 * - Sales: Transaction and commission costs
 */
public class Expenditure {
    /** Unique identifier for the expenditure (can be auto-generated) */
    private String id;
    
    /** Human-readable description of the expenditure */
    private String description;
    
    /** Amount of the expenditure using BigDecimal for precision */
    private BigDecimal amount;
    
    /** Category this expenditure belongs to */
    private Category category;
    
    /** Date and time when the expenditure occurred */
    private LocalDateTime dateTime;
    
    /** Project phase this expenditure is associated with */
    private String phase;
    
    /** ID of the bank account used for this expenditure */
    private String bankAccountId;
    
    /** Optional receipt information or file path */
    private String receiptInfo;

    /**
     * Creates a new Expenditure with a specified ID.
     * 
     * This constructor is used when creating expenditures with known IDs,
     * typically when loading from persistent storage.
     * 
     * @param id Unique identifier for the expenditure
     * @param description Human-readable description of the expense
     * @param amount The monetary amount (must be positive)
     * @param category The category this expenditure belongs to
     * @param dateTime When the expenditure occurred
     * @param phase The project phase (e.g., "Construction", "Marketing")
     */
    public Expenditure(String id, String description, BigDecimal amount, Category category, LocalDateTime dateTime, String phase) {
        this.id = id;
        this.description = description;
        this.amount = amount;
        this.category = category;
        this.dateTime = dateTime;
        this.phase = phase;
        this.bankAccountId = null;  // Will be set separately
        this.receiptInfo = null;    // Optional field
    }

    /**
     * Creates a new Expenditure without an ID for auto-generation.
     * 
     * This constructor is used when creating new expenditures where the ID
     * will be automatically generated by the ExpenditureManager.
     * 
     * @param description Human-readable description of the expense
     * @param amount The monetary amount (must be positive)
     * @param category The category this expenditure belongs to
     * @param dateTime When the expenditure occurred
     * @param phase The project phase (e.g., "Construction", "Marketing")
     */
    public Expenditure(String description, BigDecimal amount, Category category, LocalDateTime dateTime, String phase) {
        this.id = null; // Will be auto-generated by ExpenditureManager
        this.description = description;
        this.amount = amount;
        this.category = category;
        this.dateTime = dateTime;
        this.phase = phase;
        this.bankAccountId = null;  // Will be set separately
        this.receiptInfo = null;    // Optional field
    }

    /**
     * Creates a new Expenditure with ID and bank account information.
     * 
     * This constructor includes bank account ID for complete expenditure
     * initialization, typically used when all information is available.
     * 
     * @param id Unique identifier for the expenditure
     * @param description Human-readable description of the expense
     * @param amount The monetary amount (must be positive)
     * @param category The category this expenditure belongs to
     * @param dateTime When the expenditure occurred
     * @param phase The project phase
     * @param bankAccountId The bank account used for this expenditure
     */
    public Expenditure(String id, String description, BigDecimal amount, Category category, LocalDateTime dateTime, String phase, String bankAccountId) {
        this(id, description, amount, category, dateTime, phase);
        this.bankAccountId = bankAccountId;
    }

    // Getter methods with documentation
    
    /** @return The unique expenditure ID */
    public String getId() { return id; }
    
    /** @return The description of the expenditure */
    public String getDescription() { return description; }
    
    /** @return The amount of the expenditure */
    public BigDecimal getAmount() { return amount; }
    
    /** @return The category this expenditure belongs to */
    public Category getCategory() { return category; }
    
    /** @return The date and time of the expenditure */
    public LocalDateTime getDateTime() { return dateTime; }
    
    /** @return The project phase of the expenditure */
    public String getPhase() { return phase; }
    
    /** @return The bank account ID used for this expenditure */
    public String getBankAccountId() { return bankAccountId; }
    
    /** @return The receipt information or file path */
    public String getReceiptInfo() { return receiptInfo; }
    
    // Setter methods with documentation
    
    /** @param id The expenditure ID to set */
    public void setId(String id) { this.id = id; }
    
    /** @param description The description to set */
    public void setDescription(String description) { this.description = description; }
    
    /** @param amount The amount to set */
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    
    /** @param category The category to set */
    public void setCategory(Category category) { this.category = category; }
    
    /** @param dateTime The date and time to set */
    public void setDateTime(LocalDateTime dateTime) { this.dateTime = dateTime; }
    
    /** @param phase The project phase to set */
    public void setPhase(String phase) { this.phase = phase; }
    
    /** @param bankAccountId The bank account ID to set */
    public void setBankAccountId(String bankAccountId) { this.bankAccountId = bankAccountId; }
    
    /** @param receiptInfo The receipt information to set */
    public void setReceiptInfo(String receiptInfo) { this.receiptInfo = receiptInfo; }

    /**
     * Validates whether this expenditure has all required fields.
     * 
     * This method checks that:
     * - Description is not null and not blank
     * - Amount is not null and is positive
     * - Category is not null
     * - DateTime is not null
     * 
     * Note: ID can be null for auto-generation scenarios.
     * 
     * @return true if the expenditure is valid, false otherwise
     */
    public boolean isValid() {
        // Allow null ID for auto-generation, but require other essential fields
        return description != null && !description.isBlank()
            && amount != null && amount.compareTo(BigDecimal.ZERO) > 0
            && category != null && dateTime != null;
    }

    /**
     * Returns a comprehensive string representation of the expenditure.
     * 
     * The string includes all expenditure details formatted for easy reading,
     * including ID, description, amount, category, date/time, phase, bank account,
     * and receipt status.
     * 
     * @return A formatted string containing all expenditure information
     */
    @Override
    public String toString() {
        return String.format("Expenditure{id='%s', desc='%s', amount='%s', category='%s', date='%s', phase='%s', account='%s', receipt='%s'}",
                id, description, amount, (category != null ? category.getName() : "N/A"), dateTime, phase, bankAccountId, 
                (receiptInfo != null && !receiptInfo.trim().isEmpty()) ? receiptInfo : "No receipt");
    }
}